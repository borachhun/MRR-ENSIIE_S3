# 7 = always target CHL i
CHLi_sample <- 10^test_data_CHLi[, 7]
# === LINEAR ===
formula <- as.formula(paste("`CHL ", i+1, "` ~ .", sep=""))
reg_linear <- lm(formula, data=train_data_CHLi)
linear_predict <- 10^predict(reg_linear, newdata=test_data_CHLi)
rss_linear <- c(rss_linear, sum((CHLi_sample - linear_predict)^2))
# === FORWARD ===
forward_formula <- as.formula(paste("`CHL ", i+1, "` ~ 1", sep=""))
reg_forward <- step(lm(forward_formula, data=train_data_CHLi), list(upper=reg_linear), direction="forward", trace=-1)
forward_predict <- 10^predict(reg_forward, newdata=test_data_CHLi)
rss_linear <- c(rss_linear, sum((CHLi_sample - forward_predict)^2))
# === RIDGE ===
library(glmnet)
# remove CHL 2-18 and year (7:24)
cv_ridge <- cv.glmnet(x=as.matrix(nine_locations[, -(7:24)]), y=nine_locations[,(6+i)], alpha=0)
# 7 = always target
reg_ridge <- glmnet(x=as.matrix(train_data_CHLi[,-7]), y=train_data_CHLi[,7], alpha=0, lambda=cv_ridge$lambda.min)
ridge_predict <- 10^predict(reg_ridge, newx=as.matrix(test_data_CHLi[,-7]))
rss_ridge <- c(rss_ridge, sum((CHLi_sample - ridge_predict)^2))
# === LASSO ===
# remove CHL 2-18 and year (7:24)
cv_lasso <- cv.glmnet(x=as.matrix(nine_locations[, -(7:24)]), y=nine_locations[,(6+i)], alpha=1)
# 7 = always target
reg_lasso <- glmnet(x=as.matrix(train_data_CHLi[,-7]), y=train_data_CHLi[,7], alpha=1, lambda=cv_ridge$lambda.min)
lasso_predict <- 10^predict(reg_lasso, newx=as.matrix(test_data_CHLi[,-7]))
rss_lasso <- c(rss_lasso, sum((CHLi_sample - lasso_predict)^2))
}
plot(rss_linear)
plot(rss_forward)
plot(rss_forward)
rss_forward
forward_predict
linear_predict
rss_lasso
rss_forward
plot(rss_ridge)
plot(rss_lasso)
plot(rss_linear)
length(rss_linear)
length(rss_ridge)
length(rss_lasso)
1241/5
?step
str(forward_formula)
predict(reg_forward, train_data_CHLi)
library(R.matlab)
mat_data <- readMat("VectLB19922008.mat")
df <- as.data.frame(mat_data$Vect)
# add column names
colnames(df) <- unlist(mat_data$labels)
# convert all CHL i to log10 scale
df[, 23:40] <- log10(df[, 23:40])
# remove THERM 2 - THERM 18
df <- df[, -(6:22)]
colnames(df)
# remove lat,long (26,27)
nine_locations <- df[(round(df$latitude)==32 & round(df$longitude)==-64), -c(26,27)]
i <- 1
for (lat in unique(round(df$latitude))) {
for (long in unique(round(df$longitude))) {
if (!(lat==32 & long==-64)) {
# remove CHL 2-18, 5days, year, lat, long (7:27)
tmp <- df[(round(df$latitude)==lat & round(df$longitude)==long), -(7:27)]
colnames(tmp) <- paste(colnames(tmp), i)
nine_locations <- cbind(nine_locations, tmp)
i <- i + 1
}
}
}
# convert date to sin and cos
nine_locations$`sin5days` <- sin(2*pi* nine_locations$`5days` /73)
nine_locations$`cos5days` <- cos(2*pi* nine_locations$`5days` /73)
# remove 5days (24)
nine_locations <- nine_locations[, -24]
colnames(nine_locations)
subset_year <- split(
x = unique(nine_locations$year),
f = sample(rep(1:5, times=c(4,4,3,3,3)))
)
# remove year (24)
train_data <- nine_locations[nine_locations$year %in% c(subset_year[[1]], subset_year[[2]], subset_year[[3]]), -24]
test_data <- nine_locations[nine_locations$year %in% subset_year[[4]], -24]
validate_data <- nine_locations[nine_locations$year %in% subset_year[[5]], -24]
colnames(train_data)
rss_linear <- c()
rss_forward <- c()
rss_ridge <- c()
rss_lasso <- c()
# loop for CHL 2-18
for (i in 1:17) {
# 7:23 = CHL 2-18
train_data_CHLi <- train_data[, -(c(7:23)[-i])]
test_data_CHLi <- test_data[, -(c(7:23)[-i])]
# 7 = always target CHL i
CHLi_sample <- 10^test_data_CHLi[, 7]
# === LINEAR ===
formula <- as.formula(paste("`CHL ", i+1, "` ~ .", sep=""))
reg_linear <- lm(formula, data=train_data_CHLi)
linear_predict <- 10^predict(reg_linear, newdata=test_data_CHLi)
rss_linear <- c(rss_linear, sum((CHLi_sample - linear_predict)^2))
# === FORWARD ===
forward_formula <- as.formula(paste("`CHL ", i+1, "` ~ 1", sep=""))
reg_forward <- step(lm(forward_formula, data=train_data_CHLi), list(upper=reg_linear), direction="forward", trace=-1)
forward_predict <- 10^predict(reg_forward, newdata=test_data_CHLi)
rss_forward <- c(rss_forward, sum((CHLi_sample - forward_predict)^2))
# === RIDGE ===
library(glmnet)
# remove CHL 2-18 and year (7:24)
cv_ridge <- cv.glmnet(x=as.matrix(nine_locations[, -(7:24)]), y=nine_locations[,(6+i)], alpha=0)
# 7 = always target
reg_ridge <- glmnet(x=as.matrix(train_data_CHLi[,-7]), y=train_data_CHLi[,7], alpha=0, lambda=cv_ridge$lambda.min)
ridge_predict <- 10^predict(reg_ridge, newx=as.matrix(test_data_CHLi[,-7]))
rss_ridge <- c(rss_ridge, sum((CHLi_sample - ridge_predict)^2))
# === LASSO ===
# remove CHL 2-18 and year (7:24)
cv_lasso <- cv.glmnet(x=as.matrix(nine_locations[, -(7:24)]), y=nine_locations[,(6+i)], alpha=1)
# 7 = always target
reg_lasso <- glmnet(x=as.matrix(train_data_CHLi[,-7]), y=train_data_CHLi[,7], alpha=1, lambda=cv_ridge$lambda.min)
lasso_predict <- 10^predict(reg_lasso, newx=as.matrix(test_data_CHLi[,-7]))
rss_lasso <- c(rss_lasso, sum((CHLi_sample - lasso_predict)^2))
}
plot(rss_linear)
plot(rss_forward)
plot(rss_ridge)
plot(rss_lasso)
mat_data <- readMat("VectLB19922008.mat")
library(R.matlab)
library(data.table)
library(glmnet)
mat_data <- readMat("VectLB19922008.mat")
df <- as.data.frame(mat_data$Vect)
# add column names
colnames(df) <- unlist(mat_data$labels)
colnames(df)
# convert all CHL i to log10 scale
df[, 23:40] <- log10(df[, 23:40])
# remove THERM 2 - THERM 18
df <- df[, -(6:22)]
colnames(df)
mat_data <- readMat("VectLB19922008.mat")
df <- as.data.frame(mat_data$Vect)
# add column names
colnames(df) <- unlist(mat_data$labels)
# convert all CHL i to log10 scale
df[, 23:40] <- log10(df[, 23:40])
# remove THERM 2 - THERM 18
df <- df[, -(6:22)]
colnames(df)
dim(df)
mat_data <- readMat("VectLB19922008.mat")
df <- as.data.frame(mat_data$Vect)
# add column names
colnames(df) <- unlist(mat_data$labels)
# convert all CHL i to log10 scale
df[, 23:40] <- log10(df[, 23:40])
# remove THERM 2 - THERM 18
df <- df[, -(6:22)]
colnames(df)
View(df)
library(R.matlab)
library(data.table)
library(glmnet)
mat_data <- readMat("VectLB19922008.mat")
df <- as.data.frame(mat_data$Vect)
# add column names
colnames(df) <- unlist(mat_data$labels)
# convert all CHL i to log10 scale
df[, 23:40] <- log10(df[, 23:40])
# remove THERM 2 - THERM 18
df <- df[, -(6:22)]
colnames(df)
bats <- df[(df$latitude>=31) & (df$latitude<=33) & (df$longitude<=-63) & (df$longitude>=-65), ]
# remove lat and long (26,27)
bats <- bats[, -c(26,27)]
# convert date to sin and cos
bats$`sin5days` <- sin(2*pi* bats$`5days` /73)
bats$`cos5days` <- cos(2*pi* bats$`5days` /73)
colnames(bats)
subset_year <- split(
x = unique(df$year),
f = sample(rep(1:5, times=c(4,4,3,3,3)))
)
subset_year
# remove 5days and year (24,25)
bats_train_data <- bats[bats$year %in% c(subset_year[[1]], subset_year[[2]], subset_year[[3]]), -c(24,25)]
bats_test_data <- bats[bats$year %in% subset_year[[4]], -c(24,25)]
bats_validate_data <- bats[bats$year %in% subset_year[[5]], -c(24,25)]
colnames(bats_train_data)
bats_with_prev <- bats[order(bats$year),]
bats_with_prev$`Prev SSH` <- shift(bats_with_prev$`SSH`)
bats_with_prev$`Prev CC` <- shift(bats_with_prev$`CC`)
bats_with_prev$`Prev WS` <- shift(bats_with_prev$`WS`)
bats_with_prev$`Prev SR` <- shift(bats_with_prev$`SR`)
bats_with_prev$`Prev THERM 1` <- shift(bats_with_prev$`THERM 1`)
bats_with_prev$`Prev CHL 1` <- shift(bats_with_prev$`CHL 1`)
# remove first line (NA)
bats_with_prev <- bats_with_prev[-1,]
colnames(bats_with_prev)
# remove 5days and year (24,25)
bats_with_prev_train_data <- bats_with_prev[bats_with_prev$year %in% c(subset_year[[1]], subset_year[[2]], subset_year[[3]]), -c(24,25)]
bats_with_prev_test_data <- bats_with_prev[bats_with_prev$year %in% subset_year[[4]], -c(24,25)]
bats_with_prev_validate_data <- bats_with_prev[bats_with_prev$year %in% subset_year[[5]], -c(24,25)]
colnames(bats_with_prev_train_data)
# remove lat,long (26,27)
nine_locations <- df[(round(df$latitude)==32 & round(df$longitude)==-64), -c(26,27)]
i <- 1
for (lat in unique(round(df$latitude))) {
for (long in unique(round(df$longitude))) {
if (!(lat==32 & long==-64)) {
# remove CHL 2-18, 5days, year, lat, long (7:27)
tmp <- df[(round(df$latitude)==lat & round(df$longitude)==long), -(7:27)]
colnames(tmp) <- paste(colnames(tmp), i)
nine_locations <- cbind(nine_locations, tmp)
i <- i + 1
}
}
}
# convert date to sin and cos
nine_locations$`sin5days` <- sin(2*pi* nine_locations$`5days` /73)
nine_locations$`cos5days` <- cos(2*pi* nine_locations$`5days` /73)
# remove 5days (24)
nine_locations <- nine_locations[, -24]
colnames(nine_locations)
# remove year (24)
train_data <- nine_locations[nine_locations$year %in% c(subset_year[[1]], subset_year[[2]], subset_year[[3]]), -24]
test_data <- nine_locations[nine_locations$year %in% subset_year[[4]], -24]
validate_data <- nine_locations[nine_locations$year %in% subset_year[[5]], -24]
colnames(train_data)
nine_locations <- df[(round(df$latitude)==32 & round(df$longitude)==-64), -c(26,27)]
i <- 1
for (lat in unique(round(df$latitude))) {
for (long in unique(round(df$longitude))) {
if (!(lat==32 & long==-64)) {
# remove CHL 2-18, 5days, year, lat, long (7:27)
tmp <- df[(round(df$latitude)==lat & round(df$longitude)==long), -(7:23)]
colnames(tmp) <- paste(colnames(tmp), i)
nine_locations <- cbind(nine_locations, tmp)
i <- i + 1
}
}
}
nine_locations
mat_data <- readMat("VectLB19922008.mat")
df <- as.data.frame(mat_data$Vect)
# add column names
colnames(df) <- unlist(mat_data$labels)
# convert all CHL i to log10 scale
df[, 23:40] <- log10(df[, 23:40])
# remove THERM 2 - THERM 18
df <- df[, -(6:22)]
colnames(df)
df
df[(round(df$latitude)==32 & round(df$longitude)==-64), -c(26,27)]
bats[order(bats$year),]
bats[order(bats$year),][1200:1205]
bats[order(bats$year),][1200:1205,]
# remove 5days and year (24,25)
bats_train_data <- bats[bats$year %in% c(subset_year[[1]], subset_year[[2]], subset_year[[3]]), -c(24,25)]
library(R.matlab)
library(data.table)
library(glmnet)
mat_data <- readMat("VectLB19922008.mat")
df <- as.data.frame(mat_data$Vect)
# add column names
colnames(df) <- unlist(mat_data$labels)
# convert all CHL i to log10 scale
df[, 23:40] <- log10(df[, 23:40])
# remove THERM 2 - THERM 18
df <- df[, -(6:22)]
colnames(df)
df
subset_year <- split(
x = unique(df$year),
f = sample(rep(1:5, times=c(4,4,3,3,3)))
)
subset_year
bats <- df[(df$latitude>=31) & (df$latitude<=33) & (df$longitude<=-63) & (df$longitude>=-65), ]
# remove lat and long (26,27)
bats <- bats[, -c(26,27)]
# convert date to sin and cos
bats$`sin5days` <- sin(2*pi* bats$`5days` /73)
bats$`cos5days` <- cos(2*pi* bats$`5days` /73)
colnames(bats)
# remove 5days and year (24,25)
bats_train_data <- bats[bats$year %in% c(subset_year[[1]], subset_year[[2]], subset_year[[3]]), -c(24,25)]
bats_test_data <- bats[bats$year %in% subset_year[[4]], -c(24,25)]
bats_validate_data <- bats[bats$year %in% subset_year[[5]], -c(24,25)]
colnames(bats_train_data)
# remove lat,long (26,27)
nine_locations <- df[(round(df$latitude)==32 & round(df$longitude)==-64), -c(26,27)]
i <- 1
for (lat in unique(round(df$latitude))) {
for (long in unique(round(df$longitude))) {
if (!(lat==32 & long==-64)) {
# remove CHL 2-18, 5days, year, lat, long (7:27)
tmp <- df[(round(df$latitude)==lat & round(df$longitude)==long), -(7:27)]
colnames(tmp) <- paste(colnames(tmp), i)
nine_locations <- cbind(nine_locations, tmp)
i <- i + 1
}
}
}
# convert date to sin and cos
nine_locations$`sin5days` <- sin(2*pi* nine_locations$`5days` /73)
nine_locations$`cos5days` <- cos(2*pi* nine_locations$`5days` /73)
# remove 5days (24)
nine_locations <- nine_locations[, -24]
colnames(nine_locations)
# remove year (24)
train_data <- nine_locations[nine_locations$year %in% c(subset_year[[1]], subset_year[[2]], subset_year[[3]]), -24]
test_data <- nine_locations[nine_locations$year %in% subset_year[[4]], -24]
validate_data <- nine_locations[nine_locations$year %in% subset_year[[5]], -24]
colnames(train_data)
library(R.matlab)
library(data.table)
library(glmnet)
library(R.matlab)
library(data.table)
library(glmnet)
library(R.matlab)
library(data.table)
library(glmnet)
mat_data <- readMat("VectLB19922008.mat")
df <- as.data.frame(mat_data$Vect)
# add column names
colnames(df) <- unlist(mat_data$labels)
# convert all CHL i to log10 scale
df[, 23:40] <- log10(df[, 23:40])
# remove THERM 2 - THERM 18
df <- df[, -(6:22)]
colnames(df)
df
mat_data <- readMat("VectLB19922008.mat")
df <- as.data.frame(mat_data$Vect)
# add column names
colnames(df) <- unlist(mat_data$labels)
# convert all CHL i to log10 scale
df[, 23:40] <- log10(df[, 23:40])
# remove THERM 2 - THERM 18
df <- df[, -(6:22)]
colnames(df)
subset_year <- split(
x = unique(df$year),
f = sample(rep(1:5, times=c(4,4,3,3,3)))
)
subset_year
bats <- df[(df$latitude>=31) & (df$latitude<=33) & (df$longitude<=-63) & (df$longitude>=-65), ]
# remove lat and long (26,27)
bats <- bats[, -c(26,27)]
# convert date to sin and cos
bats$`sin5days` <- sin(2*pi* bats$`5days` /73)
bats$`cos5days` <- cos(2*pi* bats$`5days` /73)
colnames(bats)
# remove 5days and year (24,25)
bats_train_data <- bats[bats$year %in% c(subset_year[[1]], subset_year[[2]], subset_year[[3]]), -c(24,25)]
bats_test_data <- bats[bats$year %in% subset_year[[4]], -c(24,25)]
bats_validate_data <- bats[bats$year %in% subset_year[[5]], -c(24,25)]
colnames(bats_train_data)
rmse_bats_linear <- c()
rmse_bats_forward <- c()
rmse_bats_ridge <- c()
rmse_bats_lasso <- c()
# loop for CHL 2-18
for (i in 1:17) {
# 7:23 = CHL 2-18
train_data_CHLi <- bats_train_data[, -(c(7:23)[-i])]
test_data_CHLi <- bats_test_data[, -(c(7:23)[-i])]
# 7 = always target CHL i
CHLi_sample <- 10^test_data_CHLi[, 7]
# === LINEAR ===
formula <- as.formula(paste("`CHL ", i+1, "` ~ .", sep=""))
reg_linear <- lm(formula, data=train_data_CHLi)
linear_predict <- 10^predict(reg_linear, newdata=test_data_CHLi)
rmse_bats_linear <- c(rmse_bats_linear, sqrt(sum((CHLi_sample - linear_predict)^2) / length(CHLi_sample)))
# === FORWARD ===
forward_formula <- as.formula(paste("`CHL ", i+1, "` ~ 1", sep=""))
reg_forward <- step(lm(forward_formula, data=train_data_CHLi), list(upper=reg_linear), direction="forward", trace=0)
forward_predict <- 10^predict(reg_forward, newdata=test_data_CHLi)
rmse_bats_forward <- c(rmse_bats_forward, sqrt(sum((CHLi_sample - forward_predict)^2) / length(CHLi_sample)))
# === RIDGE ===
# remove CHL 2-18, 5days and year (7:25)
cv_ridge <- cv.glmnet(x=as.matrix(bats[, -(7:25)]), y=bats[,(6+i)], alpha=0)
# 7 = always target
reg_ridge <- glmnet(x=as.matrix(train_data_CHLi[,-7]), y=train_data_CHLi[,7], alpha=0, lambda=cv_ridge$lambda.min)
ridge_predict <- 10^predict(reg_ridge, newx=as.matrix(test_data_CHLi[,-7]))
rmse_bats_ridge <- c(rmse_bats_ridge, sqrt(sum((CHLi_sample - ridge_predict)^2) / length(CHLi_sample)))
# === LASSO ===
# remove CHL 2-18, 5days and year (7:25)
cv_lasso <- cv.glmnet(x=as.matrix(bats[, -(7:25)]), y=bats[,(6+i)], alpha=1)
# 7 = always target
reg_lasso <- glmnet(x=as.matrix(train_data_CHLi[,-7]), y=train_data_CHLi[,7], alpha=1, lambda=cv_lasso$lambda.min)
lasso_predict <- 10^predict(reg_lasso, newx=as.matrix(test_data_CHLi[,-7]))
rmse_bats_lasso <- c(rmse_bats_lasso, sqrt(sum((CHLi_sample - lasso_predict)^2) / length(CHLi_sample)))
}
plot(rmse_bats_linear)
plot(rmse_bats_forward)
plot(rmse_bats_ridge)
plot(rmse_bats_lasso)
subset_year <- split(
x = unique(df$year),
f = sample(rep(1:5, times=c(4,4,3,3,3)))
)
subset_year
subset_year <- split(
x = unique(df$year),
f = sample(rep(1:5, times=c(4,4,3,3,3)))
)
subset_year
subset_year <- split(
x = unique(df$year),
f = sample(rep(1:5, times=c(4,4,3,3,3)))
)
subset_year
subset_year <- split(
x = unique(df$year),
f = sample(rep(1:5, times=c(4,4,3,3,3)))
)
subset_year
bats <- df[(df$latitude>=31) & (df$latitude<=33) & (df$longitude<=-63) & (df$longitude>=-65), ]
# remove lat and long (26,27)
bats <- bats[, -c(26,27)]
# convert date to sin and cos
bats$`sin5days` <- sin(2*pi* bats$`5days` /73)
bats$`cos5days` <- cos(2*pi* bats$`5days` /73)
colnames(bats)
# remove 5days and year (24,25)
bats_train_data <- bats[bats$year %in% c(subset_year[[1]], subset_year[[2]], subset_year[[3]]), -c(24,25)]
bats_test_data <- bats[bats$year %in% subset_year[[4]], -c(24,25)]
bats_validate_data <- bats[bats$year %in% subset_year[[5]], -c(24,25)]
colnames(bats_train_data)
rmse_bats_linear <- c()
rmse_bats_forward <- c()
rmse_bats_ridge <- c()
rmse_bats_lasso <- c()
# loop for CHL 2-18
for (i in 1:17) {
# 7:23 = CHL 2-18
train_data_CHLi <- bats_train_data[, -(c(7:23)[-i])]
test_data_CHLi <- bats_test_data[, -(c(7:23)[-i])]
# 7 = always target CHL i
CHLi_sample <- 10^test_data_CHLi[, 7]
# === LINEAR ===
formula <- as.formula(paste("`CHL ", i+1, "` ~ .", sep=""))
reg_linear <- lm(formula, data=train_data_CHLi)
linear_predict <- 10^predict(reg_linear, newdata=test_data_CHLi)
rmse_bats_linear <- c(rmse_bats_linear, sqrt(sum((CHLi_sample - linear_predict)^2) / length(CHLi_sample)))
# === FORWARD ===
forward_formula <- as.formula(paste("`CHL ", i+1, "` ~ 1", sep=""))
reg_forward <- step(lm(forward_formula, data=train_data_CHLi), list(upper=reg_linear), direction="forward", trace=0)
forward_predict <- 10^predict(reg_forward, newdata=test_data_CHLi)
rmse_bats_forward <- c(rmse_bats_forward, sqrt(sum((CHLi_sample - forward_predict)^2) / length(CHLi_sample)))
# === RIDGE ===
# remove CHL 2-18, 5days and year (7:25)
cv_ridge <- cv.glmnet(x=as.matrix(bats[, -(7:25)]), y=bats[,(6+i)], alpha=0)
# 7 = always target
reg_ridge <- glmnet(x=as.matrix(train_data_CHLi[,-7]), y=train_data_CHLi[,7], alpha=0, lambda=cv_ridge$lambda.min)
ridge_predict <- 10^predict(reg_ridge, newx=as.matrix(test_data_CHLi[,-7]))
rmse_bats_ridge <- c(rmse_bats_ridge, sqrt(sum((CHLi_sample - ridge_predict)^2) / length(CHLi_sample)))
# === LASSO ===
# remove CHL 2-18, 5days and year (7:25)
cv_lasso <- cv.glmnet(x=as.matrix(bats[, -(7:25)]), y=bats[,(6+i)], alpha=1)
# 7 = always target
reg_lasso <- glmnet(x=as.matrix(train_data_CHLi[,-7]), y=train_data_CHLi[,7], alpha=1, lambda=cv_lasso$lambda.min)
lasso_predict <- 10^predict(reg_lasso, newx=as.matrix(test_data_CHLi[,-7]))
rmse_bats_lasso <- c(rmse_bats_lasso, sqrt(sum((CHLi_sample - lasso_predict)^2) / length(CHLi_sample)))
}
plot(rmse_bats_linear)
plot(rmse_bats_forward)
plot(rmse_bats_ridge)
plot(rmse_bats_lasso)
?par
?plot
?lm
tmp_linear <- lm(`CHL 5`~ ., data=df)
tmp_linear <- lm(`CHL 5`~ ., data=df)
str(tmp_linear)
tmp_linear <- lm(`CHL 5`~ ., data=df)
summary(tmp_linear)
lm
?lm
tmp_linear <- lm(`CHL 5`~ ., data=df)
summary(tmp_linear)
summary(tmp_linear)$r.squared
tmp_linear <- lm(`CHL 5`~ ., data=df)
str(summary(tmp_linear))
tmp_linear <- lm(`CHL 5`~ ., data=df)
str(tmp_linear)
tmp_linear <- lm(`CHL 5`~ ., data=df)
str(summary(tmp_linear))
tmp_linear <- lm(`CHL 5`~ ., data=df)
str(summary(tmp_linear))
tmp_forward <- step(lm(`CHL 5`~ 1, data=df), list(upper=tmp_linear), direction="forward", trace=0)
str(tmp_forward)
tmp_linear <- lm(`CHL 5`~ ., data=df)
#str(summary(tmp_linear))
tmp_forward <- step(lm(`CHL 5`~ 1, data=df), list(upper=tmp_linear), direction="forward", trace=0)
str(tmp_forward)
tmp_linear <- lm(`CHL 5`~ ., data=df)
#str(summary(tmp_linear))
tmp_forward <- step(lm(`CHL 5`~ 1, data=df), list(upper=tmp_linear), direction="forward", trace=0)
str(summary(tmp_forward))
?glment
?glmnet
?summary
tmp_linear <- lm(`CHL 5`~ ., data=df)
#str(summary(tmp_linear))
tmp_forward <- step(lm(`CHL 5`~ 1, data=df), list(upper=tmp_linear), direction="forward", trace=0)
#str(summary(tmp_forward))
tmp_cv_ridge <- cv.glmnet(x=as.matrix(df[,-10]), y=df[,10], alpha=0)
tmp_ridge <- glmnet(x=as.matrix(df[,-10]), y=df[,10], alpha=0, lambda=tmp_cv_ridge$lambda.min)
summary(tmp_ridge)
