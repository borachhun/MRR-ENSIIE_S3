# 7 = always target
reg_ridge <- glmnet(x=as.matrix(train_data_CHLi[,-7]), y=train_data_CHLi[,7], alpha=0, lambda=cv_ridge$lambda.min)
model_ridge <- append(model_ridge, list(reg_ridge))
ridge_predict <- 10^predict(reg_ridge, newx=as.matrix(test_data_CHLi[,-7]))
rmse_ridge <- c(rmse_ridge, sqrt(sum((CHLi_sample - ridge_predict)^2) / length(CHLi_sample)))
r_squared_ridge <- c(r_squared_ridge, r_squared(CHLi_sample, ridge_predict))
# === LASSO ===
# remove CHL 2-18 and year (7:24)
cv_lasso <- cv.glmnet(x=as.matrix(nine_locations[, -(7:24)]), y=nine_locations[,(6+i)], alpha=1)
# 7 = always target
reg_lasso <- glmnet(x=as.matrix(train_data_CHLi[,-7]), y=train_data_CHLi[,7], alpha=1, lambda=cv_lasso$lambda.min)
model_lasso <- append(model_lasso, list(reg_lasso))
lasso_predict <- 10^predict(reg_lasso, newx=as.matrix(test_data_CHLi[,-7]))
rmse_lasso <- c(rmse_lasso, sqrt(sum((CHLi_sample - lasso_predict)^2) / length(CHLi_sample)))
r_squared_lasso <- c(r_squared_lasso, r_squared(CHLi_sample, lasso_predict))
# === ELASTIC NET ===
sub_rmse_elastic_net <- c()
sub_r_squared_elastic_net <- c()
all_elastic_net_models <- list()
for (a in 0:10) {
# remove CHL 2-18, 5days and year (7:25)
cv_elastic_net <- cv.glmnet(x=as.matrix(nine_locations[, -(7:24)]), y=nine_locations[,(6+i)], alpha=a/10)
# 7 = always target
reg_elastic_net <- glmnet(x=as.matrix(train_data_CHLi[,-7]), y=train_data_CHLi[,7], alpha=a/10, lambda=cv_elastic_net$lambda.min)
all_elastic_net_models <- append(all_elastic_net_models, list(reg_elastic_net))
elastic_net_predict <- 10^predict(reg_elastic_net, newx=as.matrix(test_data_CHLi[,-7]))
sub_rmse_elastic_net <- c(sub_rmse_elastic_net, sqrt(sum((CHLi_sample - elastic_net_predict)^2) / length(CHLi_sample)))
sub_r_squared_elastic_net <- c(sub_r_squared_elastic_net, r_squared(CHLi_sample, elastic_net_predict))
}
min_error_index <- which.min(sub_rmse_elastic_net)
model_elastic_net <- append(model_elastic_net, list(all_elastic_net_models[[min_error_index]]))
rmse_elastic_net <- c(rmse_elastic_net, sub_rmse_elastic_net[min_error_index])
r_squared_elastic_net <- c(r_squared_elastic_net, sub_r_squared_elastic_net[min_error_index])
}
CHL_heat_map <- function(CHL_data, title) {
plot_data <- expand.grid(depth=2:18, `5days`=1:73)
plot_data$CHL <- c(sapply(1:nrow(CHL_data), function(row) as.numeric(CHL_data[row,])))
`5 days` <- plot_data$`5days`
`Depth level` <- plot_data$depth
`log10(CHL)` <- plot_data$CHL
return(ggplot(plot_data, aes(x=`5 days`, y=`Depth level`, fill=`log10(CHL)`)) + geom_tile() + scale_fill_gradientn(colors = rainbow(7), limits=c(-1.8,0.4), breaks=seq(-1.8,0.4,0.4)) + scale_y_reverse() + coord_fixed() + ggtitle(title))
}
# predict log10 CHL 2-18
log_CHL_predict <- function(test_data, model_list, regression) {
# 219 = 73 x 3 (3 years)
res <- rep(0, times=73)
if (regression %in% c("ridge", "lasso", "elastic net")) {
test_data <- as.matrix(test_data)
}
for (i in 1:17) {
res <- cbind(res, predict(model_list[[i]], test_data))
}
return(res[,-1])
}
# 2001 heatmap observation
ggsave("2001_bats_real.png", plot=CHL_heat_map(bats[bats$year==2001, 7:23], "2001"), height=2, width=6)
# 2001 heatmap prediction BATS
ggsave("2001_bats_linear.png", plot=CHL_heat_map(log_CHL_predict(bats[bats$year==2001, -c(7:25)], model_bats_linear, "linear"), "Linear"), height=2, width=6)
ggsave("2001_bats_forward.png", plot=CHL_heat_map(log_CHL_predict(bats[bats$year==2001, -c(7:25)], model_bats_forward, "forward"), "Forward"), height=2, width=6)
ggsave("2001_bats_ridge.png", plot=CHL_heat_map(log_CHL_predict(bats[bats$year==2001, -c(7:25)], model_bats_ridge, "ridge"), "Ridge"), height=2, width=6)
ggsave("2001_bats_lasso.png", plot=CHL_heat_map(log_CHL_predict(bats[bats$year==2001, -c(7:25)], model_bats_lasso, "lasso"), "Lasso"), height=2, width=6)
ggsave("2001_bats_elastic_net.png", plot=CHL_heat_map(log_CHL_predict(bats[bats$year==2001, -c(7:25)], model_bats_elastic_net, "elastic net"), "Elastic net"), height=2, width=6)
# 2001 heatmap prediction temporal
ggsave("2001_temp_linear.png", plot=CHL_heat_map(log_CHL_predict(bats_with_prev[bats_with_prev$year==2001, -c(7:25)], model_bats_prev_linear, "linear"), "Linear"), height=2, width=6)
ggsave("2001_temp_forward.png", plot=CHL_heat_map(log_CHL_predict(bats_with_prev[bats_with_prev$year==2001, -c(7:25)], model_bats_prev_forward, "forward"), "Forward"), height=2, width=6)
ggsave("2001_temp_ridge.png", plot=CHL_heat_map(log_CHL_predict(bats_with_prev[bats_with_prev$year==2001, -c(7:25)], model_bats_prev_ridge, "ridge"), "Ridge"), height=2, width=6)
ggsave("2001_temp_lasso.png", plot=CHL_heat_map(log_CHL_predict(bats_with_prev[bats_with_prev$year==2001, -c(7:25)], model_bats_prev_lasso, "lasso"), "Lasso"), height=2, width=6)
ggsave("2001_temp_elastic_net.png", plot=CHL_heat_map(log_CHL_predict(bats_with_prev[bats_with_prev$year==2001, -c(7:25)], model_bats_prev_elastic_net, "elastic net"), "Elastic net"), height=2, width=6)
# 2001 heatmap prediction spatial
ggsave("2001_spat_linear.png", plot=CHL_heat_map(log_CHL_predict(nine_locations[nine_locations$year==2001, -c(7:24)], model_linear, "linear"), "Linear"), height=2, width=6)
ggsave("2001_spat_forward.png", plot=CHL_heat_map(log_CHL_predict(nine_locations[nine_locations$year==2001, -c(7:24)], model_forward, "forward"), "Forward"), height=2, width=6)
ggsave("2001_spat_ridge.png", plot=CHL_heat_map(log_CHL_predict(nine_locations[nine_locations$year==2001, -c(7:24)], model_ridge, "ridge"), "Ridge"), height=2, width=6)
ggsave("2001_spat_lasso.png", plot=CHL_heat_map(log_CHL_predict(nine_locations[nine_locations$year==2001, -c(7:24)], model_lasso, "lasso"), "Lasso"), height=2, width=6)
ggsave("2001_spat_elastic_net.png", plot=CHL_heat_map(log_CHL_predict(nine_locations[nine_locations$year==2001, -c(7:24)], model_elastic_net, "elastic net"), "Elastic net"), height=2, width=6)
mean(rmse_bats_linear)
mean(rmse_bats_lasso)
mean(rmse_bats_ridge)
mean(r_squared_bats_ridge)
mean(r_squared_bats_elastic_net)
mean(r_squared_bats_forward)
mean(rmse_linear)
mean(rmse_lasso)
mean(rmse_ridge)
mean(r_squared_ridge)
mean(r_squared_elastic_net)
mean(r_squared_forward)
mean(rmse_bats_prev_linear)
mean(rmse_bats_prev_lasso)
mean(rmse_bats_prev_ridge)
mean(r_squared_bats_prev_ridge)
mean(r_squared_bats_prev_forward)
mean(r_squared_bats_prev_elastic_net)
library(R.matlab)
library(data.table)
library(glmnet)
library(ggplot2)
library(gridExtra)
r_squared <- function(Y, Y_predict) {
tss <- sum( (Y-mean(Y))^2 )
rss <- sum( (Y-Y_predict)^2 )
return(1-(rss/tss))
}
my_plot <- function(perf_data, perf_type, method) {
res <- ggplot(
data.frame(x_df = 2:18, y_df = perf_data),
aes(x = x_df, y = y_df)
) + ggtitle(method) + xlab("CHL") + ylab(perf_type) + theme(plot.title=element_text(size=15, face="bold"))
if (perf_type == "RMSE") {
res <- res + geom_point(size=2, color="darkorange1") + ylim(0,0.18)
}
else {
res <- res + geom_point(size=2, color="darkcyan") + ylim(0,1)
}
return(res)
}
mat_data <- readMat("VectLB19922008.mat")
df <- as.data.frame(mat_data$Vect)
# add column names
colnames(df) <- unlist(mat_data$labels)
# convert all CHL i to log10 scale
df[, 23:40] <- log10(df[, 23:40])
# remove THERM 2 - THERM 18
df <- df[, -(6:22)]
df
bats <- df[(df$latitude>=31) & (df$latitude<=33) & (df$longitude<=-63) & (df$longitude>=-65), ]
# remove lat and long (26,27)
bats <- bats[, -c(26,27)]
# convert date to sin and cos
bats$`sin5days` <- sin(2*pi* bats$`5days` /73)
bats$`cos5days` <- cos(2*pi* bats$`5days` /73)
colnames(bats)
ggsave("1992_bats_real.png", plot=CHL_heat_map(bats[bats$year==1992, 7:23], "1992"), height=2, width=6)
CHL_heat_map <- function(CHL_data, title) {
plot_data <- expand.grid(depth=2:18, `5days`=1:73)
plot_data$CHL <- c(sapply(1:nrow(CHL_data), function(row) as.numeric(CHL_data[row,])))
`5 days` <- plot_data$`5days`
`Depth level` <- plot_data$depth
`log10(CHL)` <- plot_data$CHL
return(ggplot(plot_data, aes(x=`5 days`, y=`Depth level`, fill=`log10(CHL)`)) + geom_tile() + scale_fill_gradientn(colors = rainbow(7), limits=c(-1.8,0.4), breaks=seq(-1.8,0.4,0.4)) + scale_y_reverse() + coord_fixed() + ggtitle(title))
}
ggsave("1992_bats_real.png", plot=CHL_heat_map(bats[bats$year==1992, 7:23], "1992"), height=2, width=6)
ggsave("1996_bats_real.png", plot=CHL_heat_map(bats[bats$year==1996, 7:23], "1996"), height=2, width=6)
ggsave("2000_bats_real.png", plot=CHL_heat_map(bats[bats$year==2000, 7:23], "2000"), height=2, width=6)
ggsave("2004_bats_real.png", plot=CHL_heat_map(bats[bats$year==2004, 7:23], "2004"), height=2, width=6)
library(R.matlab)
library(data.table)
library(glmnet)
library(ggplot2)
library(gridExtra)
r_squared <- function(Y, Y_predict) {
tss <- sum( (Y-mean(Y))^2 )
rss <- sum( (Y-Y_predict)^2 )
return(1-(rss/tss))
}
my_plot <- function(perf_data, perf_type, method) {
res <- ggplot(
data.frame(x_df = 2:18, y_df = perf_data),
aes(x = x_df, y = y_df)
) + ggtitle(method) + xlab("CHL") + ylab(perf_type) + theme(plot.title=element_text(size=15, face="bold"))
if (perf_type == "RMSE") {
res <- res + geom_point(size=2, color="darkorange1") + ylim(0,0.18)
}
else {
res <- res + geom_point(size=2, color="darkcyan") + ylim(0,1)
}
return(res)
}
library(R.matlab)
library(data.table)
library(glmnet)
library(ggplot2)
library(gridExtra)
r_squared <- function(Y, Y_predict) {
tss <- sum( (Y-mean(Y))^2 )
rss <- sum( (Y-Y_predict)^2 )
return(1-(rss/tss))
}
my_plot <- function(perf_data, perf_type, method) {
res <- ggplot(
data.frame(x_df = 2:18, y_df = perf_data),
aes(x = x_df, y = y_df)
) + ggtitle(method) + xlab("CHL") + ylab(perf_type) + theme(plot.title=element_text(size=15, face="bold"))
if (perf_type == "RMSE") {
res <- res + geom_point(size=2, color="darkorange1") + ylim(0,0.18)
}
else {
res <- res + geom_point(size=2, color="darkcyan") + ylim(0,1)
}
return(res)
}
mat_data <- readMat("VectLB19922008.mat")
df <- as.data.frame(mat_data$Vect)
# add column names
colnames(df) <- unlist(mat_data$labels)
# convert all CHL i to log10 scale
df[, 23:40] <- log10(df[, 23:40])
# remove THERM 2 - THERM 18
df <- df[, -(6:22)]
df
#subset_year <- split(
#  x = unique(df$year),
#  f = sample(rep(1:5, times=c(4,4,3,3,3)))
#)
# randomly chosen years for project
subset_year = list(`1`=c(1995,1998,1999,2005),
`2`=c(1993,1994,2002,2004),
`3`=c(1996,2003,2006),
`4`=c(1992,2001,2008),
`5`=c(1997,2000,2007))
bats <- df[(df$latitude>=31) & (df$latitude<=33) & (df$longitude<=-63) & (df$longitude>=-65), ]
# remove lat and long (26,27)
bats <- bats[, -c(26,27)]
# convert date to sin and cos
bats$`sin5days` <- sin(2*pi* bats$`5days` /73)
bats$`cos5days` <- cos(2*pi* bats$`5days` /73)
colnames(bats)
# remove 5days and year (24,25)
bats_train_data <- bats[bats$year %in% c(subset_year[[1]], subset_year[[2]], subset_year[[3]]), -c(24,25)]
bats_test_data <- bats[bats$year %in% subset_year[[4]], -c(24,25)]
bats_validate_data <- bats[bats$year %in% subset_year[[5]], -c(24,25)]
rmse_bats_linear <- c()
rmse_bats_forward <- c()
rmse_bats_ridge <- c()
rmse_bats_lasso <- c()
rmse_bats_elastic_net <- c()
r_squared_bats_linear <- c()
r_squared_bats_forward <- c()
r_squared_bats_ridge <- c()
r_squared_bats_lasso <- c()
r_squared_bats_elastic_net <- c()
model_bats_linear <- list()
model_bats_forward <- list()
model_bats_ridge <- list()
model_bats_lasso <- list()
model_bats_elastic_net <- list()
# loop for CHL 2-18
for (i in 1:17) {
# 7:23 = CHL 2-18
train_data_CHLi <- bats_train_data[, -(c(7:23)[-i])]
test_data_CHLi <- bats_test_data[, -(c(7:23)[-i])]
# 7 = always target CHL i
CHLi_sample <- 10^test_data_CHLi[, 7]
# === LINEAR ===
formula <- as.formula(paste("`CHL ", i+1, "` ~ .", sep=""))
reg_linear <- lm(formula, data=train_data_CHLi)
model_bats_linear <- append(model_bats_linear, list(reg_linear))
linear_predict <- 10^predict(reg_linear, newdata=test_data_CHLi)
rmse_bats_linear <- c(rmse_bats_linear, sqrt(sum((CHLi_sample - linear_predict)^2) / length(CHLi_sample)))
r_squared_bats_linear <- c(r_squared_bats_linear, r_squared(CHLi_sample, linear_predict))
# === FORWARD ===
forward_formula <- as.formula(paste("`CHL ", i+1, "` ~ 1", sep=""))
reg_forward <- step(lm(forward_formula, data=train_data_CHLi), list(upper=reg_linear), direction="forward", trace=0)
model_bats_forward <- append(model_bats_forward, list(reg_forward))
forward_predict <- 10^predict(reg_forward, newdata=test_data_CHLi)
rmse_bats_forward <- c(rmse_bats_forward, sqrt(sum((CHLi_sample - forward_predict)^2) / length(CHLi_sample)))
r_squared_bats_forward <- c(r_squared_bats_forward, r_squared(CHLi_sample, forward_predict))
# === RIDGE ===
# remove CHL 2-18, 5days and year (7:25)
cv_ridge <- cv.glmnet(x=as.matrix(bats[, -(7:25)]), y=bats[,(6+i)], alpha=0)
# 7 = always target
reg_ridge <- glmnet(x=as.matrix(train_data_CHLi[,-7]), y=train_data_CHLi[,7], alpha=0, lambda=cv_ridge$lambda.min)
model_bats_ridge <- append(model_bats_ridge, list(reg_ridge))
ridge_predict <- 10^predict(reg_ridge, newx=as.matrix(test_data_CHLi[,-7]))
rmse_bats_ridge <- c(rmse_bats_ridge, sqrt(sum((CHLi_sample - ridge_predict)^2) / length(CHLi_sample)))
r_squared_bats_ridge <- c(r_squared_bats_ridge, r_squared(CHLi_sample, ridge_predict))
# === LASSO ===
# remove CHL 2-18, 5days and year (7:25)
cv_lasso <- cv.glmnet(x=as.matrix(bats[, -(7:25)]), y=bats[,(6+i)], alpha=1)
# 7 = always target
reg_lasso <- glmnet(x=as.matrix(train_data_CHLi[,-7]), y=train_data_CHLi[,7], alpha=1, lambda=cv_lasso$lambda.min)
model_bats_lasso <- append(model_bats_lasso, list(reg_lasso))
lasso_predict <- 10^predict(reg_lasso, newx=as.matrix(test_data_CHLi[,-7]))
rmse_bats_lasso <- c(rmse_bats_lasso, sqrt(sum((CHLi_sample - lasso_predict)^2) / length(CHLi_sample)))
r_squared_bats_lasso <- c(r_squared_bats_lasso, r_squared(CHLi_sample, lasso_predict))
# === ELASTIC NET ===
sub_rmse_elastic_net <- c()
sub_r_squared_elastic_net <- c()
all_elastic_net_models <- list()
for (a in 0:10) {
# remove CHL 2-18, 5days and year (7:25)
cv_elastic_net <- cv.glmnet(x=as.matrix(bats[, -(7:25)]), y=bats[,(6+i)], alpha=a/10)
# 7 = always target
reg_elastic_net <- glmnet(x=as.matrix(train_data_CHLi[,-7]), y=train_data_CHLi[,7], alpha=a/10, lambda=cv_elastic_net$lambda.min)
all_elastic_net_models <- append(all_elastic_net_models, list(reg_elastic_net))
elastic_net_predict <- 10^predict(reg_elastic_net, newx=as.matrix(test_data_CHLi[,-7]))
sub_rmse_elastic_net <- c(sub_rmse_elastic_net, sqrt(sum((CHLi_sample - elastic_net_predict)^2) / length(CHLi_sample)))
sub_r_squared_elastic_net <- c(sub_r_squared_elastic_net, r_squared(CHLi_sample, elastic_net_predict))
}
min_error_index <- which.min(sub_rmse_elastic_net)
model_bats_elastic_net <- append(model_bats_elastic_net, list(all_elastic_net_models[[min_error_index]]))
rmse_bats_elastic_net <- c(rmse_bats_elastic_net, sub_rmse_elastic_net[min_error_index])
r_squared_bats_elastic_net <- c(r_squared_bats_elastic_net, sub_r_squared_elastic_net[min_error_index])
}
bats_with_prev <- bats[order(bats$year),]
bats_with_prev$`Prev SSH` <- shift(bats_with_prev$`SSH`)
bats_with_prev$`Prev CC` <- shift(bats_with_prev$`CC`)
bats_with_prev$`Prev WS` <- shift(bats_with_prev$`WS`)
bats_with_prev$`Prev SR` <- shift(bats_with_prev$`SR`)
bats_with_prev$`Prev THERM 1` <- shift(bats_with_prev$`THERM 1`)
bats_with_prev$`Prev CHL 1` <- shift(bats_with_prev$`CHL 1`)
# remove first line (NA)
bats_with_prev <- bats_with_prev[-1,]
colnames(bats_with_prev)
# remove 5days and year (24,25)
bats_with_prev_train_data <- bats_with_prev[bats_with_prev$year %in% c(subset_year[[1]], subset_year[[2]], subset_year[[3]]), -c(24,25)]
bats_with_prev_test_data <- bats_with_prev[bats_with_prev$year %in% subset_year[[4]], -c(24,25)]
bats_with_prev_validate_data <- bats_with_prev[bats_with_prev$year %in% subset_year[[5]], -c(24,25)]
colnames(bats_with_prev_train_data)
rmse_bats_prev_linear <- c()
rmse_bats_prev_forward <- c()
rmse_bats_prev_ridge <- c()
rmse_bats_prev_lasso <- c()
rmse_bats_prev_elastic_net <- c()
r_squared_bats_prev_linear <- c()
r_squared_bats_prev_forward <- c()
r_squared_bats_prev_ridge <- c()
r_squared_bats_prev_lasso <- c()
r_squared_bats_prev_elastic_net <- c()
model_bats_prev_linear <- list()
model_bats_prev_forward <- list()
model_bats_prev_ridge <- list()
model_bats_prev_lasso <- list()
model_bats_prev_elastic_net <- list()
# loop for CHL 2-18
for (i in 1:17) {
# 7:23 = CHL 2-18
train_data_CHLi <- bats_with_prev_train_data[, -(c(7:23)[-i])]
test_data_CHLi <- bats_with_prev_test_data[, -(c(7:23)[-i])]
# 7 = always target CHL i
CHLi_sample <- 10^test_data_CHLi[, 7]
# === LINEAR ===
formula <- as.formula(paste("`CHL ", i+1, "` ~ .", sep=""))
reg_linear <- lm(formula, data=train_data_CHLi)
model_bats_prev_linear <- append(model_bats_prev_linear, list(reg_linear))
linear_predict <- 10^predict(reg_linear, newdata=test_data_CHLi)
rmse_bats_prev_linear <- c(rmse_bats_prev_linear, sqrt(sum((CHLi_sample - linear_predict)^2) / length(CHLi_sample)))
r_squared_bats_prev_linear <- c(r_squared_bats_prev_linear, r_squared(CHLi_sample, linear_predict))
# === FORWARD ===
forward_formula <- as.formula(paste("`CHL ", i+1, "` ~ 1", sep=""))
reg_forward <- step(lm(forward_formula, data=train_data_CHLi), list(upper=reg_linear), direction="forward", trace=0)
model_bats_prev_forward <- append(model_bats_prev_forward, list(reg_forward))
forward_predict <- 10^predict(reg_forward, newdata=test_data_CHLi)
rmse_bats_prev_forward <- c(rmse_bats_prev_forward, sqrt(sum((CHLi_sample - forward_predict)^2) / length(CHLi_sample)))
r_squared_bats_prev_forward <- c(r_squared_bats_prev_forward, r_squared(CHLi_sample, forward_predict))
# === RIDGE ===
# remove CHL 2-18, 5days and year (7:25)
cv_ridge <- cv.glmnet(x=as.matrix(bats_with_prev[, -(7:25)]), y=bats_with_prev[,(6+i)], alpha=0)
# 7 = always target
reg_ridge <- glmnet(x=as.matrix(train_data_CHLi[,-7]), y=train_data_CHLi[,7], alpha=0, lambda=cv_ridge$lambda.min)
model_bats_prev_ridge <- append(model_bats_prev_ridge, list(reg_ridge))
ridge_predict <- 10^predict(reg_ridge, newx=as.matrix(test_data_CHLi[,-7]))
rmse_bats_prev_ridge <- c(rmse_bats_prev_ridge, sqrt(sum((CHLi_sample - ridge_predict)^2) / length(CHLi_sample)))
r_squared_bats_prev_ridge <- c(r_squared_bats_prev_ridge, r_squared(CHLi_sample, ridge_predict))
# === LASSO ===
# remove CHL 2-18, 5days and year (7:25)
cv_lasso <- cv.glmnet(x=as.matrix(bats_with_prev[, -(7:25)]), y=bats_with_prev[,(6+i)], alpha=1)
# 7 = always target
reg_lasso <- glmnet(x=as.matrix(train_data_CHLi[,-7]), y=train_data_CHLi[,7], alpha=1, lambda=cv_lasso$lambda.min)
model_bats_prev_lasso <- append(model_bats_prev_lasso, list(reg_lasso))
lasso_predict <- 10^predict(reg_lasso, newx=as.matrix(test_data_CHLi[,-7]))
rmse_bats_prev_lasso <- c(rmse_bats_prev_lasso, sqrt(sum((CHLi_sample - lasso_predict)^2) / length(CHLi_sample)))
r_squared_bats_prev_lasso <- c(r_squared_bats_prev_lasso, r_squared(CHLi_sample, lasso_predict))
# === ELASTIC NET ===
sub_rmse_elastic_net <- c()
sub_r_squared_elastic_net <- c()
all_elastic_net_models <- list()
for (a in 0:10) {
# remove CHL 2-18, 5days and year (7:25)
cv_elastic_net <- cv.glmnet(x=as.matrix(bats_with_prev[, -(7:25)]), y=bats_with_prev[,(6+i)], alpha=a/10)
# 7 = always target
reg_elastic_net <- glmnet(x=as.matrix(train_data_CHLi[,-7]), y=train_data_CHLi[,7], alpha=a/10, lambda=cv_elastic_net$lambda.min)
all_elastic_net_models <- append(all_elastic_net_models, list(reg_elastic_net))
elastic_net_predict <- 10^predict(reg_elastic_net, newx=as.matrix(test_data_CHLi[,-7]))
sub_rmse_elastic_net <- c(sub_rmse_elastic_net, sqrt(sum((CHLi_sample - elastic_net_predict)^2) / length(CHLi_sample)))
sub_r_squared_elastic_net <- c(sub_r_squared_elastic_net, r_squared(CHLi_sample, elastic_net_predict))
}
min_error_index <- which.min(sub_rmse_elastic_net)
model_bats_prev_elastic_net <- append(model_bats_prev_elastic_net, list(all_elastic_net_models[[min_error_index]]))
rmse_bats_prev_elastic_net <- c(rmse_bats_prev_elastic_net, sub_rmse_elastic_net[min_error_index])
r_squared_bats_prev_elastic_net <- c(r_squared_bats_prev_elastic_net, sub_r_squared_elastic_net[min_error_index])
}
# remove lat,long (26,27)
nine_locations <- df[(round(df$latitude)==32 & round(df$longitude)==-64), -c(26,27)]
i <- 1
for (lat in unique(round(df$latitude))) {
for (long in unique(round(df$longitude))) {
if (!(lat==32 & long==-64)) {
# remove CHL 2-18, 5days, year, lat, long (7:27)
tmp <- df[(round(df$latitude)==lat & round(df$longitude)==long), -(7:27)]
colnames(tmp) <- paste(colnames(tmp), i)
nine_locations <- cbind(nine_locations, tmp)
i <- i + 1
}
}
}
# convert date to sin and cos
nine_locations$`sin5days` <- sin(2*pi* nine_locations$`5days` /73)
nine_locations$`cos5days` <- cos(2*pi* nine_locations$`5days` /73)
# remove 5days (24)
nine_locations <- nine_locations[, -24]
colnames(nine_locations)
# remove year (24)
train_data <- nine_locations[nine_locations$year %in% c(subset_year[[1]], subset_year[[2]], subset_year[[3]]), -24]
test_data <- nine_locations[nine_locations$year %in% subset_year[[4]], -24]
validate_data <- nine_locations[nine_locations$year %in% subset_year[[5]], -24]
colnames(train_data)
rmse_linear <- c()
rmse_forward <- c()
rmse_ridge <- c()
rmse_lasso <- c()
rmse_elastic_net <- c()
r_squared_linear <- c()
r_squared_forward <- c()
r_squared_ridge <- c()
r_squared_lasso <- c()
r_squared_elastic_net <- c()
model_linear <- list()
model_forward <- list()
model_ridge <- list()
model_lasso <- list()
model_elastic_net <- list()
# loop for CHL 2-18
for (i in 1:17) {
# 7:23 = CHL 2-18
train_data_CHLi <- train_data[, -(c(7:23)[-i])]
test_data_CHLi <- test_data[, -(c(7:23)[-i])]
# 7 = always target CHL i
CHLi_sample <- 10^test_data_CHLi[, 7]
# === LINEAR ===
formula <- as.formula(paste("`CHL ", i+1, "` ~ .", sep=""))
reg_linear <- lm(formula, data=train_data_CHLi)
model_linear <- append(model_linear, list(reg_linear))
linear_predict <- 10^predict(reg_linear, newdata=test_data_CHLi)
rmse_linear <- c(rmse_linear, sqrt(sum((CHLi_sample - linear_predict)^2) / length(CHLi_sample)))
r_squared_linear <- c(r_squared_linear, r_squared(CHLi_sample, linear_predict))
# === FORWARD ===
forward_formula <- as.formula(paste("`CHL ", i+1, "` ~ 1", sep=""))
reg_forward <- step(lm(forward_formula, data=train_data_CHLi), list(upper=reg_linear), direction="forward", trace=0)
model_forward <- append(model_forward, list(reg_forward))
forward_predict <- 10^predict(reg_forward, newdata=test_data_CHLi)
rmse_forward <- c(rmse_forward, sqrt(sum((CHLi_sample - forward_predict)^2) / length(CHLi_sample)))
r_squared_forward <- c(r_squared_forward, r_squared(CHLi_sample, forward_predict))
# === RIDGE ===
# remove CHL 2-18 and year (7:24)
cv_ridge <- cv.glmnet(x=as.matrix(nine_locations[, -(7:24)]), y=nine_locations[,(6+i)], alpha=0)
# 7 = always target
reg_ridge <- glmnet(x=as.matrix(train_data_CHLi[,-7]), y=train_data_CHLi[,7], alpha=0, lambda=cv_ridge$lambda.min)
model_ridge <- append(model_ridge, list(reg_ridge))
ridge_predict <- 10^predict(reg_ridge, newx=as.matrix(test_data_CHLi[,-7]))
rmse_ridge <- c(rmse_ridge, sqrt(sum((CHLi_sample - ridge_predict)^2) / length(CHLi_sample)))
r_squared_ridge <- c(r_squared_ridge, r_squared(CHLi_sample, ridge_predict))
# === LASSO ===
# remove CHL 2-18 and year (7:24)
cv_lasso <- cv.glmnet(x=as.matrix(nine_locations[, -(7:24)]), y=nine_locations[,(6+i)], alpha=1)
# 7 = always target
reg_lasso <- glmnet(x=as.matrix(train_data_CHLi[,-7]), y=train_data_CHLi[,7], alpha=1, lambda=cv_lasso$lambda.min)
model_lasso <- append(model_lasso, list(reg_lasso))
lasso_predict <- 10^predict(reg_lasso, newx=as.matrix(test_data_CHLi[,-7]))
rmse_lasso <- c(rmse_lasso, sqrt(sum((CHLi_sample - lasso_predict)^2) / length(CHLi_sample)))
r_squared_lasso <- c(r_squared_lasso, r_squared(CHLi_sample, lasso_predict))
# === ELASTIC NET ===
sub_rmse_elastic_net <- c()
sub_r_squared_elastic_net <- c()
all_elastic_net_models <- list()
for (a in 0:10) {
# remove CHL 2-18, 5days and year (7:25)
cv_elastic_net <- cv.glmnet(x=as.matrix(nine_locations[, -(7:24)]), y=nine_locations[,(6+i)], alpha=a/10)
# 7 = always target
reg_elastic_net <- glmnet(x=as.matrix(train_data_CHLi[,-7]), y=train_data_CHLi[,7], alpha=a/10, lambda=cv_elastic_net$lambda.min)
all_elastic_net_models <- append(all_elastic_net_models, list(reg_elastic_net))
elastic_net_predict <- 10^predict(reg_elastic_net, newx=as.matrix(test_data_CHLi[,-7]))
sub_rmse_elastic_net <- c(sub_rmse_elastic_net, sqrt(sum((CHLi_sample - elastic_net_predict)^2) / length(CHLi_sample)))
sub_r_squared_elastic_net <- c(sub_r_squared_elastic_net, r_squared(CHLi_sample, elastic_net_predict))
}
min_error_index <- which.min(sub_rmse_elastic_net)
model_elastic_net <- append(model_elastic_net, list(all_elastic_net_models[[min_error_index]]))
rmse_elastic_net <- c(rmse_elastic_net, sub_rmse_elastic_net[min_error_index])
r_squared_elastic_net <- c(r_squared_elastic_net, sub_r_squared_elastic_net[min_error_index])
}
# Temporal analysis elastic net validation test
rmse_bats_prev_elastic_net_validation <- c()
r_squared_bats_prev_elastic_net_validation <- c()
# loop for CHL 2-18
for (i in 1:17) {
# 7:23 = CHL 2-18
validate_data_CHLi <- bats_with_prev_validate_data[, -(c(7:23)[-i])]
# 7 = always target CHL i
CHLi_sample <- 10^validate_data_CHLi[, 7]
elastic_net_predict <- 10^predict(model_bats_prev_elastic_net[[i]], newx=as.matrix(validate_data_CHLi[,-7]))
rmse_bats_prev_elastic_net_validation <- c(rmse_bats_prev_elastic_net_validation, sqrt(sum((CHLi_sample - elastic_net_predict)^2) / length(CHLi_sample)))
r_squared_bats_prev_elastic_net_validation <- c(r_squared_bats_prev_elastic_net_validation, r_squared(CHLi_sample, elastic_net_predict))
}
# Spatial analysis elastic net validation test
rmse_elastic_net_validation <- c()
r_squared_elastic_net_validation <- c()
# loop for CHL 2-18
for (i in 1:17) {
# 7:23 = CHL 2-18
validate_data_CHLi <- validate_data[, -(c(7:23)[-i])]
# 7 = always target CHL i
CHLi_sample <- 10^validate_data_CHLi[, 7]
elastic_net_predict <- 10^predict(model_elastic_net[[i]], newx=as.matrix(validate_data_CHLi[,-7]))
rmse_elastic_net_validation <- c(rmse_elastic_net_validation, sqrt(sum((CHLi_sample - elastic_net_predict)^2) / length(CHLi_sample)))
r_squared_elastic_net_validation <- c(r_squared_elastic_net_validation, r_squared(CHLi_sample, elastic_net_predict))
}
mean(rmse_elastic_net_validation)
mean(r_squared_elastic_net_validation)
mean(r_squared_bats_prev_elastic_net_validation)
mean(rmse_bats_prev_elastic_net_validation)
mean(rmse_bats_ridge)
mean(r_squared_bats_ridge)
mean(r_squared_bats_prev_ridge)
